"""
Django settings for FleetMind project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Pobieramy zmienną środowiskową, by rozróżnić środowisko (domyślnie 'dev')
ENV = os.environ.get('ENV', 'dev')

# BASE_DIR ułatwia budowanie ścieżek względem katalogu głównego projektu
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# W środowisku produkcyjnym warto przekazywać tę wartość za pomocą zmiennych środowiskowych
aws_key = os.getenv("AWS_ACCESS_KEY_ID")
aws_secret = os.getenv("AWS_SECRET_ACCESS_KEY") # <-- klucz AWS
aws_region = os.getenv("AWS_DEFAULT_REGION")

SECRET_KEY = os.getenv("SECRET_KEY")  # <-- klucz do Django

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS: W trybie developmentu używamy ['*'], ale w produkcji należy podać konkretne domeny
ALLOWED_HOSTS = ['*']

# Aplikacje zainstalowane w projekcie, w tym lokalna aplikacja "Fleet"
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Fleet',
]

# Middleware – zestaw standardowych middleware używanych przez Django
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# SECURITY SETTINGS: konfiguracja pozwająca Django poprawnie autoryzować żądania z mojej domeny na AWS
CSRF_TRUSTED_ORIGINS = ['https://fleetmind-env.eba-bxnzixvu.eu-central-1.elasticbeanstalk.com']

# Główna konfiguracja URL – wskazuje na plik urls.py projektu
ROOT_URLCONF = 'FleetMind.urls'

# Konfiguracja szablonów (templates):
# Ustawienie APP_DIRS=True pozwala Django szukać szablonów w katalogach poszczególnych aplikacji.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Jeżeli masz foldery z szablonami poza aplikacjami, dodaj ścieżki tutaj
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Konfiguracja WSGI – plik, który pozwala na komunikację serwera z aplikacją Django
WSGI_APPLICATION = 'FleetMind.wsgi.application'

# Konfiguracja baz danych:
# Jeśli środowisko to "prod", używamy PostgreSQL, w przeciwnym wypadku SQLite.
if ENV == 'prod':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('RDS_DB_NAME', 'postgres'),
            'USER': os.environ.get('RDS_USERNAME', 'postgres'),
            'PASSWORD': os.environ.get('RDS_PASSWORD', ''),
            'HOST': os.environ.get('RDS_HOSTNAME', 'localhost'),
            'PORT': os.environ.get('RDS_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Walidacja haseł – standardowe walidatory Django pomagające utrzymać bezpieczeństwo kont użytkowników
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internacjonalizacja: ustawienia dotyczące języka i strefy czasowej
LANGUAGE_CODE = 'pl'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Konfiguracja plików statycznych
# STATIC_URL – to adres URL, pod którym przeglądarka będzie szukać plików (zasobów) statycznych
STATIC_URL = 'static/'

# STATIC_ROOT – katalog, do którego podczas deploymentu zbierane są wszystkie pliki statyczne
# Używamy tego ustawienia w produkcji, aby serwer mógł zaserwować wszystkie pliki z jednej lokalizacji.
# Ustawienie to jest wykorzystywane na produkcji. Podczas wdrożenia wykonać polecenie [python manage.py collectstatic]
# Następnie po tym poleceniu, serwer WWW może podać wszystkie pliki do jednego katalogu.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# STATICFILES_DIRS – to lista fodlerów, w których Django szuka plików statycznych podczas developmentu.
# (np. folder "static" w głównym katalogu projektu)- zazwyczaj wskazuje się na folder 'static' w katalogu głównym projektu
STATICFILES_DIRS = [
    BASE_DIR / 'Fleet/static',
]

# Domyślny typ pola klucza głównego
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Ustawienia przekierowań przy logowaniu/wylogowaniu
LOGIN_REDIRECT_URL = '/user-panel/'
LOGOUT_REDIRECT_URL = '/login/'
LOGIN_URL = '/login/'
